---
layout: post
title:  Well-architected framework (WAF) on Azure
description: "Designed for resilient, efficient cloud workloads"
date: 2024-11-07 13:00:00 +0300
image: '/images/waf.png'
toc: true
tags: [Azure, Architecture, CAF, WAF]
---
Hey Everyone, the Microsoft [Azure Well-Architected Framework (WAF)](https://learn.microsoft.com/en-us/azure/well-architected/) provides a broad set of guidelines and best practices fr architects and developers to build secure, high-performing, resilient, and efficient infrastructure for their apps. 
Let's explore Azure's WAF, its structure, best practices on its app, and the next steps you can take toward optimizing your cloud workloads.

<p align="center">
  <img src="https://github.com/thiagocruzrj/thiagocruzrj.github.io/blob/main/images/caf.png" />
</p>

## Understanding the Need for a Framework
Most organizations begin their cloud journey by leveraging the [Cloud Adoption Framework](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/scenarios/). CAF helps guide governance, identity management, financial operations, and general organizational strategy in cloud adoption. 
### The focal points of this framework are:
* **Governance Models**: Policy and compliance controls.
* **Identity Management**: Realizing the security identity and access controls.
* **Financial Operations (FinOps)**: Managing costs and investments effectively.
* **Migration Strategies**: Design and implement cloud migration.
While the CAF addresses high-level organizational considerations, workload-specific guidance is still needed. This is where the Azure WAF comes in.

## Defining a Workload
Within the WAF, a workload is much more than an app or a collection of resources. It can be described as a set of integrated components working together to deliver a particular business function. 
### Some of the key characteristics of a workload include:
* **Business Alignment**: Map directly to a business process or function.
* **Resource Pool**: Includes computing resources, storage, network, and sometimes several applications.
* **Development Lifecycle**: Development, testing, deployment, and maintenance processes are included.
* **Operational Context**: Addresses detailed governance, identity, and monitoring requirements.
* **Ownership**: It is normally administered by a professional business team or department.
Understanding a workload is crucial because the WAF optimizes these work units within your cloud environment.

## Introducing the Azure Well-Architected Framework
Azure WAF is a set of guiding principles that will help improve quality attributes in your workloads. It's designed to help you make the right decisions while architecting your applications to comply with your organizational requirements and optimize for the cloud.

### Key Aspects of the WAF:
* **Architecture-Centric**: Relates to best practices about architectures rather than implementation details.
* **Technology-Agnostic Core**: While focused on Azure, many principles generally apply to any cloud or on-premises environment.
* **Structured Guidance**: Pillars, design principles, checklists, and recommendations for structured implementation.
* **Continuous Improvement**: Allows for the constant reviewing and revision of workloads.

![](/images/waf-full.png)
## The Five Pillars of the Well-Architected Framework
### Reliability to make your app resilient to failures and keep it running.
* **Design for resilience**: Point to critical components and possible failure sites; design in redundancy, including fault tolerance.
* **Simplify Architecture**: Complexity increases the risk of failures. Keep designs as simple as possible.
* **Backup and recovery planning**: Develop backup and disaster recovery plans to include [Recovery Time Objectives (RTO)](https://learn.microsoft.com/en-us/azure/reliability/disaster-recovery-overview) and [Recovery Point Objectives (RPO)](https://learn.microsoft.com/en-us/azure/reliability/disaster-recovery-overview).

#### Approaches and Benefits:
* **High Availability Implementation**: Spread resources across [Availability Zones](https://learn.microsoft.com/en-us/azure/reliability/availability-zones-overview?tabs=azure-cli) and [Regions](https://azure.microsoft.com/en-us/explore/global-infrastructure/geographies) to reduce the probability of localized failures.
* **Automate failover mechanisms** by using services like [Azure Traffic Manager](https://learn.microsoft.com/en-us/azure/traffic-manager/traffic-manager-overview) to seamlessly redirect during outages.
* **Regular Testing**: Simulate failures and hold drills to ensure recovery procedures work.

### Security to prevent application and data threats using strong security controls.
* **Identity Management**: Centralized identity providers, such as [Azure Entra ID](https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id#documentation-and-training), will be implemented. [Role-based Access Control](https://learn.microsoft.com/en-us/azure/role-based-access-control/overview) [Multi-Factor Authentication (MFA)](https://learn.microsoft.com/en-us/entra/identity/authentication/concept-mfa-howitworks) to access control will also be implemented.
* **Data Protection**: Encrypt data at rest and in transit and manage keys and secrets in [Azure Key Vault](https://learn.microsoft.com/en-us/azure/key-vault/general/overview).
* **Network Security**: The solution uses network segmentation, [Azure Firewall](https://learn.microsoft.com/en-us/azure/firewall/overview), and [NSGs](https://learn.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview) to control traffic flow.
* **Security Posture Management** by using [Azure Security Center](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft.azuresecuritycenter?tab=overview) to monitor and improve security posture.

#### Approaches and Benefits:
* **Zero Trust Model**: Never trust but always verify. This reduces the insider threat and lateral movement in case of a breach.
* **Regular Auditing and Monitoring**: Enable logging and monitoring to promptly detect and respond to threats.
* **Compliance** is made on regulatory requirements like [GDPR](https://azure.microsoft.com/en-us/blog/protecting-privacy-in-microsoft-azure-gdpr-azure-policy-updates/), [HIPAA](https://learn.microsoft.com/en-us/azure/compliance/offerings/offering-hipaa-us), or industry-specific standards.

### Cost Optimization to add value at the lowest possible cost without compromising performance or reliability.
* **Cost Modeling**: By identify cost drivers; forecast costs based on usage patterns and growth projections.
* **Resource Optimization**: Right-size resources using tools like [Azure Advisor](https://learn.microsoft.com/en-us/azure/advisor/advisor-overview) to identify underutilized resources.
* Reduce costs by using **reserved or spot instances** for predictable workloads.
* **Automation**: Auto-scale, and shut down resources during off-peaking hours.

#### Methods and Advantages:
* **Tagging and accountability**: Use resource tags to allocate costs and hold teams accountable.
* **Continuous Cost Analysis**: Check the billing reports and set up cost alerts.
* **Optimization Licensing** Leverage existing on-premises licenses by using [Azure Hybrid Benefit](https://learn.microsoft.com/en-us/windows-server/get-started/azure-hybrid-benefit?tabs=azure).

### Operational Excellence to ensure operations keep workloads running reliably and efficiently.
* **Automation and DevOps**: Set up CI/CD pipelines using [Azure DevOps](https://azure.microsoft.com/en-us/products/devops) or [GitHub Actions](https://github.com/features/actions) to ensure consistent, error-free deployments.
* **Infrastructure as Code**: Tools will allow using Azure Resource Manager templates, Bicep, and Terraform for infrastructure changes and state control.
* **Monitoring and alerting**: To monitor performance, use Azure Monitor and Application Insights to anticipate issues before they happen.
* **Develop runbooks** and standard operating procedures for everyday tasks and incident responses.

#### Approaches and Benefits:
* **Self-healing systems**: Design applications that can detect failures and recover automatically.
* **Continuous Improvement**: Have feedback loops to learn from incidents and improve processes.
* **Documentation and Knowledge Sharing**: Maintain updated documentation that supports onboarding and incident management.

### The Performance Efficiency premise is that all apps should run smoothly and scale up when necessary.
* **Scalability**: Horizontally scaled. Automatic scaling can be achieved through Azure App Service and Azure Functions.
* **Caching Strategies**: To reduce latency, implement a Caching mechanism using Azure Cache for Redis.
* **Data Partitioning**: Utilize sharding and partitioning in databases for efficient big data management.
* **Network Optimization**: CDNs and Azure Front Door will be used to optimize content delivery.
#### Strategies and Benefits:
* **Performance Testing**: Run load and stress tests regularly to find bottlenecks.
* **Resource Optimization**: Choose appropriate VM sizes and storage types based on performance needs.
* Use **serverless computing** to scale up on its own.

## Structure of the Framework
### Design Principles
Each pillar has underlying basic design principles that form the basis of the architectural decisions.
#### Reliability Design Principles
* **Design to Fail**: Assume things will go wrong and design your system to recover from failures.
* **Use Managed Services**: Where appropriate, use Azure's managed services, which provide inherent redundancy and fault tolerance.

### Checklists
Checklists are the to-do items to ensure you've addressed essential aspects of each pillar. They serve as a means to validate your work during both the design and review stages.
### Example of Reliability Checklist Items:
* Have you developed health monitoring and diagnostics?
* Does that use redundancy? Availability Zones, or perhaps Regions?
* Do you have automated backups and disaster recovery plans?

### Trade-offs
Knowing trade-offs is so important because optimizing one pillar could destroy another. The framework catches your attention about the potential conflicts when you can decide.
#### Common Trade-offs:
* **Cost vs. Reliability**: The higher reliability can be costly as redundant resources will be required.
* **Security vs. Performance**: Adding security features—from encryption to deep packet inspection—intrinsically introduces delay.

#### Strategy for Trade-offs Management
* **Prioritize Requirements**: Identify which pillars are most important for your workload.
* **Balance Decisions**: Make good choices by considering both the benefits and disadvantages.
* **Document Decisions**: Record decisions and why they are made for later use.

### Recommendations
These best practices and patterns assist you in effectively implementing design principles.
* **Circuit Breaker Pattern**: Detect faults nicely to prevent the failure from cascading.
* **Bulkhead Pattern**: Components are isolated so that failure in one does not affect other components.
* **Compensating Transaction Pattern**: Handle eventual consistency in distributed systems.

## Workload Classifications
The framework offers specialized advice in areas of workloads with distinctive needs.

### Mission-Critical Workloads
They require high availability and zero downtime. Often requires geo-redundancy and sophisticated failover mechanisms.
#### Additional Considerations:
* **Advanced telemetry and real-time analytics** enhance the monitoring.
* **Rigorous Testing**: Conduct chaos engineering experiments to test resilience.
* **Regulatory Compliance**: Ensure strict compliance standards.

### Telecommunications-grade workloads
They require ultra-low latency and high throughput, it must support a high capacity and instantaneous scaling.
#### More Considerations:
* **Edge Computing**: Compute at the edge with [Azure EdgeZones](https://azure.microsoft.com/en-us/solutions/private-multi-access-edge-compute-mec/).
* **Network Optimization**: Use advanced network features and custom routing.

## Service Guides
After making architectural decisions, refer to Service Guides for Azure-specific services to implement best practices.

### Anatomy of Service Guides
* **Pillar-Specific Guidance**: Under each service, guidance is organized beneath the five pillars.
* **Checklists and Recommendations**: Actionable items and best practices tailored to the service.

![](/images/aks.png)
### AKS - Azure Kubernetes Service example
* **Reliability**:
    * **Use Availability Zones**: Put nodes across zones to support fault tolerance.
    * **Health Probes**: making use of liveness and readiness probes on pods.
    * **Backup Strategies**: Cluster state and persistent volumes are periodically backed up.
* **Safety**: 
    * Implement Kubernetes **RBAC** and integrate it with **Azure EntraID**.
    * Traffic control is done using **Network Policies** in Azure or **Calico**.
    * **Secrets Management**: Manage secrets in Azure Key Vault instead of cluster configurations.
* **Cost Optimization**:
    * **Autoscaling**: Turn on the cluster autoscaler to balance node counts based on demand.
    * **Proper Nodes**: Choose the suitable virtual machine sizes for your workloads.
    * Use **Spot VMs for fault-tolerant**, non-critical workloads or spot instances.
* **Operational Excellence**:
    * **CI/CD Pipelines**: Auto-deployments with Azure DevOps or GitActions tools.
    * **Monitoring**: Monitor performance and logs with Azure Monitor for containers.
    * **Disaster Recovery**: Plan to restore the cluster and failover.
* **Performance Efficiency**:
    * **Effective Scheduling**: Utilizing node pools and taints/tolerations to isolate workload.
    * **Optimized Networking**: Choose Azure CNI or Kubenet based on the networking requirements.
    * **Resource Limits**: Limits CPU and memory allocated by the pods to prevent resource contention.

## How to Use the Well-Architected Framework
### Start at Pillars by reading through each pillar in the context of your workload
* **Document Requirements**: Define precisely what, under each pillar, should become part of your workload.
* **Apply Design Principles**: Use them to guide your architectural decisions.
* **Evaluate Current Condition**: If utilizing an existing load, evaluate how well that load meets the principles.
### Consult Workload Policy and if your workload fits a specific category
* **Review Additional Guidance**: Include considerations specific to your workload type.
* **Adjust Architecture Accordingly**: Make changes as required to meet specialized demands.
### Review Service Guides for each Azure service you are using
* **Read the Service Guide**: Know the best practices for service.
* **Implement Recommendations**: Apply checklists and recommendations to optimize the service configuration.
* **Stay Current**: Azure services change, so check for updates in the service guides regularly.
### Continuous Improvement, the architecture is not a set-and-forget activity, so implement a cycle of constant Improvement
* **Regular Assessments**: Use the Well-Architected Review to review your workload regularly.
* **Monitor and Adapt**: Track all performance metrics and be apt to follow changes in the working pattern.
* **Iterative improvements** based on learning from monitoring and feedback from users.

## When to Use the Framework
* **Initial Design Phase**: Apply the framework when first architecting a new workload.
* **Before Major Change**: As a guide for significant updates or migrations.
* **Periodic Reviews**: Re-validate regularly to ensure the workload is still within the best practices.

In Response to incidents or performance issues, use the framework to identify and address root causes.

## Who Should Use the Framework
* **Cloud Architects**: Primary users who define and govern the architecture of workloads.
* **Developers and engineers**: The people who build and maintain the applications.
* **Operations Teams**: Experts in charge of workload deployment and care. Central Governance Teams: Organizational units that enforce standards and compliance.
* **Security Teams**: Dedicated teams in charge of workload security and compliance.

## Assessment and Reporting
The Azure Well-Architected Framework provides tools to help evaluate your workloads:
* **Well-architected Review**: Understand at what level the load adheres to the framework.
* **Scoring**: Quantitative scores for each pillar to identify strengths and weaknesses. 
* **Actionable Recommendations**: Detailed counsel on areas to improve where the workload may be deficient. 
### How to Conduct an Assessment 
* Start the **review** via the Azure Portal or the Well-Architected Review tool. 
* **Select Relevant Pillars**: Select relevant pillars for your workload. 
* **Answer Questions**: Give information about your workload's design and functioning. 
* **Review Results**: Check the score and recommendation given. 
* **Improvement Plans** will be developed to order improvements for identified weak areas. 
### Integration with Azure Advisor
* Your personalized **Azure Advisor** that helps you adopt best practices to optimize your Azure deployments. 
* You can import recommendations from Azure Advisor in the Well-Architected Review for a more exhaustive view. 

## Milestones and Progress Tracking 
The framework allows you to track progress over time by creating milestones: 
* **Add Milestones**: Introduce a new milestone at key intervals, a great milestone after deployment or major updates. 
* **Compare Results**: Measure trends in scores over time. 
* **Demonstrate Improvement**: Use milestones to show progress in optimizing your workload. 
* **Review Tactics**: If scores are not improving at expected levels, re-strategize. 

## Remember
The cloud is dynamic, and your architecture should be. Regularly revisit the framework and stay ahead of new services, features, and technologies by maintaining an agile mindset in light of evolving needs.